events {
    worker_connections 1024;
}

http {
    geo $limit {
        default 1;                    # 默认启用限流
      #  127.0.0.1 0;                  # 本地IP不限流
      #  10.0.0.0/8 0;                 # 内网A类地址不限流
      #  172.16.0.0/12 0;              # 内网B类地址不限流
      #  192.168.0.0/16 0;             # 内网C类地址不限流
    }
    
    # 【基础限流配置】
    limit_req_zone $binary_remote_addr zone=ip_limit:10m rate=2r/s;
    
    # 【严格限流配置 - 针对API接口】
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=2r/s;

    # 【连接数限制】
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    
    upstream gin_servers {
        server host.docker.internal:8080 weight=1 max_fails=3 fail_timeout=30s;
    }
    
    server {
        listen 80;
        location / {
            
            # 【基础限流 - 严格1QPS】
            limit_req zone=ip_limit burst=2 nodelay;
            limit_conn conn_limit 10;  # 限制每个IP最多20个并发连接
            
            # 【反向代理核心配置】
            # proxy_pass：将请求转发到上游服务器
            # 语法：proxy_pass http://upstream名称;
            # 注意：末尾的斜杠会影响路径拼接
            
            proxy_pass http://gin_servers;  # 转发到定义的upstream
            
            # 【请求头配置 - 重要】
            
            # Host头：保留原始请求的Host
            proxy_set_header Host $host;
            
            # 客户端真实IP：让后端知道真实的客户端IP
            proxy_set_header X-Real-IP $remote_addr;
            
            # 完整转发链：包含所有经过的代理IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # 原始协议：标识客户端使用的是http还是https
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 【其他常用反向代理配置】
            # 以下配置可根据需要添加：

        }
        
    }
}